Searching Algorithm

Problem: given a collection/array of items a[0..n) and a key item x, search for the key.

1. Linear search
- traverse the array's items one by one, compare each item with the key, and return if match
- time complexity O(n)
- rarely used in practice as much slower than binary search and hash table

2. Binary search: given that the collection/array is sorted
- start with the whole array's interval. If the target is smaller than the middle item, narrow the search to the upper half.
Otherwise, narrow the search to the lower half. Repeatedly check until the value is found or the search interval is empty.
- time complexity O(log n)

3. Jump search: on sorted array
- jump ahead by fixed steps s to skip some elements, i.e. search index at 0, s, 2s, 3s, ...
Once we find an array interval ks..(k+1)s such that the search key falls in this interval, we perform linear search from
array index ks to find the search key
- time complexity O(n/s+s)
n/s + s <= 2sqrt(n/s*s) = 2sqrt(n)
Optimized time complexity is O(n^(1/2)) when s = n^(1/2)
- binary search is better than jump search but jump search has advantage that we traverse back only once while binary
search may require up to O(log n) jumps. In systems where jumping back is costly, we use jump search

4. Interpolation search: given that the array is sorted and is uniformly distributed
- while binary search goes to the middle element to check, interpolation goes to the location dependent on the search key's
value
- given a search interval with two ends' index lo and hi, the next position to check pos is calculated by formula:
pos = lo + (x-a[lo])*(hi-lo)/(a[hi]-a[lo])
- time complexity: best case O(log log n) (if array is uniformly distributed), worst case O(n)

5. Exponential search: on sorted array
- find the range where the element is present: start with subarray size 1, compare the last item with search key, then
try size 2, then 4, and so on until last element of a subarray is greater than search key. If the search key is present,
the range should be i..2i
- do binary search in the above found range
- time complexity is O(log n)
- works better than binary search for bounded arrays and if search key is present close to the beginning of the array
- useful for unbounded binary search (i.e. the array size is infinite)

6. Fibonacci search: on sorted array
- Fibonacci Numbers are recursively defined as F(n) = F(n-1) + F(n-2), F(0) = 0, F(1) = 1. First few Fibonacci Numbers
are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, â€¦
- Observations: F(n-2) ~ 1/3 F(n), F(n-1) ~ 2/3 F(n)
- First find the smallest Fibonacci numbers >= n (array length). Divide the array into 2 parts: first part with F(n-2)
first elements, second part with n - F(n-2) remaining elements.
- If the search key < last element of the first part, continue the search in the first part by Fibonacci down 2 (as
array length decreases from F(n) -> F(n-2))
- Otherwise, continue the search in the second part by Fibonacci down 1 (as array length decreases from F(n) -> F(n-1))
- Fibonacci search divides given array in unequal part using + and - operators, unlike binary search which uses / operator
- Why use Fibonacci search?
- worst case occurs when search key always fall into the second part (2/3 original length). Time complexity is still O(log n)

7.

