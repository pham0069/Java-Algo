1. Min cost problem
Given a graph and a source vertex src in graph,
find shortest paths from src to all vertices in the given graph.
The graph may contain negative weight edges.
We have discussed Dijkstra’s algorithm for this problem.
Dijkstra’s algorithm is a Greedy algorithm and time complexity is O(VLogV) (with the use of Fibonacci heap).
Dijkstra doesn’t work for Graphs with negative weight edges,
Bellman-Ford works for such graphs.
Bellman-Ford is also simpler than Dijkstra and suites well for distributed systems.
But time complexity of Bellman-Ford is O(V*E), which is more than Dijkstra.

2. Dijkstra algorithm



3. Bellman-Ford algorithm
- consider all edges in some order
- for each iteration
- if (distance[v] > distance[u] + weight(u, v))
-> update distance[v] = distance[u] + weight(u, v))
- continue until all distances are not changed any more
(takes at most V iterations)

- for example: find shortest distance from source 0 to all nodes in the graph

from    to      cost
0       1       4
0       2       5
0       3       8
1       2       -3
2       4       4
3       4       2
4       3       1

* Let's say we proceed all edges in the following order (random):

from    to      cost
3       4       2
4       3       1
2       4       4
0       2       5
1       2       -3
0       3       8
0       1       4

 * Initially, the shortest distance table looks like below

node     shortest distance      parent
0           0                      null
1           Infinity               x
2           Infinity               x
3           Infinity               x
4           Infinity               x

 * First iteration: update 2, 3, 1
node     shortest distance      parent
0           0                      null
1           4                      0        * (0-1) = 4
2           5                      0        * (0-2) = 5
3           8                      0        * (0-3) = 8
4           Infinity               x

 * Second iteration: update 4, 2
node     shortest distance      parent
0           0                      null
1           4                      0
2           1                      1        * (1-2) = -3
3           8                      0
4           10                     3        * (3-4) = 2

* Third iteration: update 4
node     shortest distance      parent
0           0                      null
1           4                      0
2           1                      1
3           8                      0
4           5                      2        * (2-4) = 4

* Forth iteration: update 3
node     shortest distance      parent
0           0                      null
1           4                      0
2           1                      1
3           6                      4        * (4-3) = 1
4           5                      2

* Fifth iteration: no update -> terminate
node     shortest distance      parent
0           0                      null
1           4                      0
2           1                      1
3           6                      4
4           5                      2

* Shortest path 0-3 can be tracked from parent
3 <- 4 <- 2 <- 1 <- 0

- number of iterations depend on the order of edges to process
For example, consider the following graph, source = 1

from    to      cost
1       2       2
2       3       3
3       4       2

 * If the order of edges is (1,2), (2, 3), (3, 4) -> 2 iterations
 * If the order of edges is (3, 4), (2, 3), (1, 2) -> 4 iterations

- if after (V-1) iterations, in Vth iteration, the distance continues to decrease
we can detect there's a negative weight cycle in the graph and break the loop
For example, consider the following graph

from     to     cost
0         1      1
1         2      3
2         3      2
3         1     -6

We have a cycle (1-2-3) with negative weight 2+3-6 = -1
-> After 5 iterations, the shortest distance could continue decreasing
This is correct, as taking multiple loop of this NW cycle will reduce the path cost

- time complexity is O(V*E)
E iterations, each iteration O(V)